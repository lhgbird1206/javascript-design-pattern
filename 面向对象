1.js中的面向对象

下面内容在执行new时，全部复制到新对象中
私有属性
私有方法
共有属性
共有方法 (特权方法)

prototype的属性
prototype的方法

下面内容在执行new时，不会复制到新对象中
类的静态共有属性
类的静态共有方法

2.闭包实现
闭包是有权访问另外一个函数作用域中变量的函数，即在一个函数内部创建另外一个函数。


3.对象的安全模式
var Book = function(title,time,type){
	//判断执行过程中this是否是当前这个对象（如果是说明是用new创建的）
	if(this instanceof Book){
		this.title = title;
		this.time = time;
		this.type = type;
	//否则重新创建这个对象
	}esle{
		return new Book(title,time,type);
	}
}

4.继承
1）类式继承
声明两个类，第一个类的实例赋值给第二个类的原型
instanceof  通过判断对象的prototype链来确定这个对象是否是某个类的实例
instance instanceof SuperClass

两个缺点:
①由于子类通过其原型prototype对父类实例化，继承了父类。所以说父类中的共有属性要是引用类型，就会在子类中被所有实例共用，因此一个子类的实例更改子类原型从父类构造函数中继承来的共有属性就会直接影响到其它子类。

②由于子类实现的继承是靠其原型prototype对父类的实例化实现的，因此在创建父类的时候，是无法向父类传递参数的，因而在实例化父类的时候也无法对父类构造函数内的属性进行初始化。

2）构造函数继承
SuperClass.call(this,id);   call的实现是深拷贝

缺点:子类只能继承父类构造函数中的属性和方法，原型上的属性和方法无法被继承。

3）组合继承
结合类式继承和构造函数继承
①弥补了构造函数继承无法继承父类原型上属性和方法的缺点
②弥补了类式继承中父类共有变量为引用类型时，子类继承该变量后会相互影响的缺点
//声明子类
function SubClass(name, time){
	//构造函数式继承父类name属性
	SuperClass.call(this, name);
	//子类中新增共有属性
	this.time = time;
}
// 类式继承 子类原型继承父类
SubClass.prototype = new SuperClass();
// 子类原型方法
SubClass.prototype.getTime = function(){
	console.log(this.time);
}




4）原型式继承
借助原型prototype可以根据已有的对象创建一个新的对象，同时不必创建新的自定义对象类型。
function inheritObject()｛
	//声明一个过度函数对象
	function F()｛｝
	//过度对象的原型继承父对象
	F.prototype = o;
	//返回过度对象的一个实例，该实例的原型继承了父对象
	return new F();
｝


5)寄生式继承
寄生式继承就是对原型继承的第二次封装，并且在这第二次封装过程中对继承的对象进行了拓展，这样新创建的对象不仅仅有父类中的属性和方法而且有新添加的属性和方法。
function(obj){
	//通过原型继承方式创建新对象
	var o =new inheritObject(obj);
	o.getName = function(){
		console.log(name);
	}
	//返回拓展后的新对象
	return o;
}

6)寄生组合式继承
是寄生式继承和构造函数继承的组合。

function inheritPrototype(subClass, superClass){
	//复制一份父类的原型副本保存在变量中
	var p = inheritObject(superClass.prototype);
	//修正因为重写子类原型导致子类的constructor属性被修改
	p.constructor = subClass;
	//设置子类的原型
	subClass.protptype = p;
}

//定义父类
function SuperClass(){
	this.name = name;
	this.colors = ["red","blue","green"];
}
//定义父类原型方法
SuperClass.prototype.getName = function(){
	console.log(this.name);
}

//定义子类
function SubClass(name, time){
	//构造函数式继承
	SuperClass.call(this, name);
	//子类新增属性
	this.time = time;
}

//寄生式继承父类原型
inheritPrototype(SubClass, SuperClass);

//子类新增原型方法
SubClass.prototype.getTime = function(){
	console.log(this.time);
}


7)多继承
将多个父类的属性和方法拷贝给子类实现继承

8)多态
通过对传递的参数判断来决定执行逻辑，即可实现一种多态处理机制。
